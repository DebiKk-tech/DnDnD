Пояснительная записка

Итак, как же работает DnDnD?
Есть главное окно. В нижней его части есть три группы кнопок: две большие, три средние и четыре маленькие. В зависимости
от того, сколько вариантов выбора есть у игрока, активизируется та или иная группа кнопок. В верхней части есть QProgressBar,
который не виден в обычное время, но появляется во время боя. Когда он появляется, над ним появляется картинка монстра,
с которым сражается игрок.
В самом начале срабатывает функция start_location (она ещё много раз повстречается), она предлагает игроку выбор: пойти
в магазин, в таверну или в Подземелье, сражаться с монстрами. В магазине с помощью QInputDialog выбирается предмет, который
игрок хочет купить - оружие, броня или амулет.
В таверне все немного сложнее. Есть кнопка, которая открывает вторую форму - форму для броска костей. Если число, введённое
игроком, совпадает с числом, выпавшим на костях, игрок получает 100 монет, если нет - проигрывает 20. Также игрок может
купить зелья или эликсиры, их количество вводится с помощью QInputDialog. Кроме того, игрок может передать монеты другим
игрокам(пока не реализовано)
В каждой локации есть кнопка "Уйти", к которой привязана функция start_location.
Для игрока есть класс Player, в нем хранится вся информация об игроке, а также есть несколько полезных функций, которые
нужны, чтобы сократить код.
В будущем, когда будет введена система регистрации, в класс будет загружаться информация из базы данных.
При закрытии программы срабатывает пока не реализованная функция profile_update, которая призвана записать изменения в
профиле игрока в базу данных
Когда игрок умирает в бою, его информирует об этом QMessageBox, а после игра закрывается, занося в базу данных тот факт,
что пользователь умер. При смерти профиль теряется
Каждое действие игрока - та или иная функция, иначе привязать действие к кнопке нельзя
Также есть вспомогательные классы Weapon, Armor, Amulet и Monster. Это сделано для удобства и краткости кода:
self.weapon.damage понятнее, чем self.weapon[0]
Есть также функция output, которая используется для вывода текста в QPlainTextEdit в середине экрана. Текст добавляется
к началу уже имеющегося, что дает вывод снизу вверх. Таким образом, текст всегда перед глазами пользователя, ему не надо
постоянно прокручивать вниз. Функция выводит по одному символу, после чего ждет 0.01 секунды, прежде чем вывести следующий.
Так вывод получается красивее